// Copyright 2023 The Elastic-AI Authors.
// part of Elastic AI Search
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//


syntax="proto2";
import "google/protobuf/descriptor.proto";

package melon;
option java_package = "com.melon";
option java_outer_classname="Options";

enum TalkType {
    TALK_TYPE_NORMAL = 0;
    TALK_TYPE_ONEWAY = 1;
}

enum ConnectionType {
    // bit-exclusive values since we may OR them to represent supported types.
    CONNECTION_TYPE_UNKNOWN = 0;
    CONNECTION_TYPE_SINGLE = 1;
    CONNECTION_TYPE_POOLED = 2;
    CONNECTION_TYPE_SHORT = 4;  
}

enum ProtocolType {
    PROTOCOL_UNKNOWN = 0;
    PROTOCOL_MELON_STD = 1;
    PROTOCOL_STREAMING_RPC = 2;
    PROTOCOL_HULU_PBRPC = 3;
    PROTOCOL_RTMP = 4;
    PROTOCOL_HTTP = 5;
    PROTOCOL_REDIS = 6;
    PROTOCOL_MONGO = 7;               // server side only
    PROTOCOL_MEMCACHE = 8;            // Client side only
    PROTOCOL_H2 = 9;
    PROTOCOL_BRPC = 10;
    PROTOCOL_SPLITTER = 30;           // for internal use
}

enum CompressType {
    COMPRESS_TYPE_NONE = 0;
    COMPRESS_TYPE_SNAPPY = 1;
    COMPRESS_TYPE_GZIP = 2;
    COMPRESS_TYPE_ZLIB = 3;
    COMPRESS_TYPE_LZ4 = 4;
}

message ChunkInfo {
    required int64 stream_id = 1;
    required int64 chunk_id = 2;
}

extend google.protobuf.ServiceOptions {
    // Timeout in milliseconds, at service level.
    optional int64 service_timeout = 90000 [default = 10000];
}

extend google.protobuf.MethodOptions {
    // Talk type.
    optional TalkType request_talk_type = 90001 [default = TALK_TYPE_NORMAL];
    optional TalkType response_talk_type = 90002 [default = TALK_TYPE_NORMAL];

    // If set, override service_timeout.
    optional int64 method_timeout = 90003;

    // Compression for request/response.
    optional CompressType request_compression = 90004 [default = COMPRESS_TYPE_NONE];
    optional CompressType response_compression = 90005 [default = COMPRESS_TYPE_NONE];
}
