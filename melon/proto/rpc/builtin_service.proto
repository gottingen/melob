//
// Copyright (C) 2024 EA group inc.
// Author: Jeff.li lijippy@163.com
// All rights reserved.
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
//


syntax="proto2";
import "google/protobuf/descriptor.proto";

package melon;

option cc_generic_services = true;
option java_generic_services = true;
option java_package = "com.melon";
option java_outer_classname = "BuiltinService";

message IndexRequest {}
message IndexResponse {} 
message FlagsRequest {}
message FlagsResponse {}
message TurboFlagsRequest {}
message TurboFlagsResponse {}
message VersionRequest {}
message VersionResponse {}
message HealthRequest {}
message HealthResponse {}
message StatusRequest {}
message StatusResponse {}
message ProtobufsRequest {}
message ProtobufsResponse {}
message ConnectionsRequest {}
message ConnectionsResponse {}
message ListRequest {}
message ListResponse {
    repeated google.protobuf.ServiceDescriptorProto service = 1;
}
message VarsRequest {}
message VarsResponse {}
message FibersRequest {}
message FibersResponse {}
message IdsRequest {}
message IdsResponse{}
message SocketsRequest {}
message SocketsResponse {}
message RpczRequest {}
message RpczResponse {}
message ThreadsRequest {}
message ThreadsResponse {}
message DirRequest {}
message DirResponse {}
message VLogRequest {}
message VLogResponse {}
message MetricsRequest {}
message MetricsResponse {}
message MemoryRequest {}
message MemoryResponse {}
message BadMethodRequest {
    required string service_name = 1;
}
message BadMethodResponse {}

service index {
    rpc default_method(IndexRequest) returns (IndexResponse);
}

service version {
    rpc default_method(VersionRequest) returns (VersionResponse);
}

service health {
    rpc default_method(HealthRequest) returns (HealthResponse);
}

service status {
    rpc default_method(StatusRequest) returns (StatusResponse);
}

service protobufs {
    rpc default_method(ProtobufsRequest) returns (ProtobufsResponse);
}

service connections {
    rpc default_method(ConnectionsRequest) returns (ConnectionsResponse);
}

service list {
    rpc default_method(ListRequest) returns (ListResponse);
}

service threads {
    rpc default_method(ThreadsRequest) returns (ThreadsResponse);
}

service vlog {
    rpc default_method(VLogRequest) returns (VLogResponse);
}

service fibers {
    rpc default_method(FibersRequest) returns (FibersResponse);
}

service ids {
    rpc default_method(IdsRequest) returns (IdsResponse);
}

service sockets {
    rpc default_method(SocketsRequest) returns (SocketsResponse);
}

service melon_metrics {
    rpc default_method(MetricsRequest) returns (MetricsResponse);
}

service badmethod {
    rpc no_method(BadMethodRequest) returns (BadMethodResponse);
}


message ProfileRequest {}
message ProfileResponse {}

service pprof {
    rpc profile(ProfileRequest) returns (ProfileResponse);
    rpc contention(ProfileRequest) returns (ProfileResponse);
    rpc heap(ProfileRequest) returns (ProfileResponse);
    rpc symbol(ProfileRequest) returns (ProfileResponse);
    rpc cmdline(ProfileRequest) returns (ProfileResponse);
    rpc growth(ProfileRequest) returns (ProfileResponse);
}

message HotspotsRequest {}
message HotspotsResponse {}

service hotspots {
    rpc cpu(HotspotsRequest) returns (HotspotsResponse);
    rpc cpu_non_responsive(HotspotsRequest) returns (HotspotsResponse);
    rpc heap(HotspotsRequest) returns (HotspotsResponse);
    rpc heap_non_responsive(HotspotsRequest) returns (HotspotsResponse);
    rpc growth(HotspotsRequest) returns (HotspotsResponse);
    rpc growth_non_responsive(HotspotsRequest) returns (HotspotsResponse);
    rpc contention(HotspotsRequest) returns (HotspotsResponse);
    rpc contention_non_responsive(HotspotsRequest) returns (HotspotsResponse);
}

service flags {
    rpc default_method(FlagsRequest) returns (FlagsResponse);
}

service tflags {
    rpc default_method(TurboFlagsRequest) returns (TurboFlagsResponse);
}

service vars {
    rpc default_method(VarsRequest) returns (VarsResponse);
}

service rpcz {
    rpc enable(RpczRequest) returns (RpczResponse);
    rpc disable(RpczRequest) returns (RpczResponse);
    rpc stats(RpczRequest) returns (RpczResponse);
    rpc hex_log_id(RpczRequest) returns (RpczResponse);
    rpc dec_log_id(RpczRequest) returns (RpczResponse);
    rpc default_method(RpczRequest) returns (RpczResponse);
}

service dir {
    rpc default_method(DirRequest) returns (DirResponse);
}

service memory {
    rpc default_method(MemoryRequest) returns (MemoryResponse);
}
