
@PACKAGE_INIT@

include ("${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@Targets.cmake")

set(@PROJECT_NAME@_VERSION_MAJOR @PROJECT_VERSION_MAJOR@)
set(@PROJECT_NAME@_VERSION_MINOR @PROJECT_VERSION_MINOR@)
set(@PROJECT_NAME@_VERSION_PATCH @PROJECT_VERSION_PATCH@)
set(@PROJECT_NAME@_VERSION @PROJECT_VERSION@)
set(@PROJECT_NAME@_INCLUDE_DIR ${PACKAGE_PREFIX_DIR}/include)
set(MELON_CXX_DEFINES @MELON_CXX_DEFINES@)
set(MELON_CXX_OPTIONS @MELON_CXX_OPTIONS@)
set(MELON_C_OPTIONS @MELON_C_OPTIONS@)

set(MELON_SYSTEM_DYLINK)
if (APPLE)
    find_library(CoreFoundation CoreFoundation)
    list(APPEND MELON_SYSTEM_DYLINK ${CoreFoundation} pthread)
elseif (${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
    list(APPEND MELON_SYSTEM_DYLINK rt dl pthread)
endif ()

set(MELON_DEPS_LIBS ${MELON_SYSTEM_DYLINK})
set(MELON_DEPS_INCLUDE_DIRS ${@PROJECT_NAME@_INCLUDE_DIR})

macro(melon_find_gflags)
    find_path(GFLAGS_INCLUDE_PATH NAMES gflags/gflags.h)
    find_library(GFLAGS_SHARED_LIB NAMES gflags)
    if(NOT GFLAGS_INCLUDE_PATH OR NOT GFLAGS_SHARED_LIB)
        message(FATAL_ERROR "gflags not found")
    endif()
    list(APPEND MELON_DEPS_LIBS ${GFLAGS_SHARED_LIB})
    list(APPEND MELON_DEPS_INCLUDE_DIRS ${GFLAGS_INCLUDE_PATH})
endmacro()

macro(melon_find_protobuf)
    find_package(Protobuf REQUIRED)
    list(APPEND MELON_DEPS_LIBS ${PROTOBUF_LIBRARIES})
    list(APPEND MELON_DEPS_INCLUDE_DIRS ${PROTOBUF_INCLUDE_DIRS})
endmacro()

macro(melon_find_leveldb)
    find_path(LEVELDB_INCLUDE_PATH NAMES leveldb/db.h)
    find_library(LEVELDB_SHARED_LIB NAMES leveldb)
    if(NOT LEVELDB_INCLUDE_PATH OR NOT LEVELDB_SHARED_LIB)
        message(FATAL_ERROR "leveldb not found")
    endif()
    list(APPEND MELON_DEPS_LIBS ${LEVELDB_SHARED_LIB})
    list(APPEND MELON_DEPS_INCLUDE_DIRS ${LEVELDB_INCLUDE_PATH})
endmacro()

macro(melon_find_openssl)
    if (CMAKE_SYSTEM_NAME STREQUAL "Darwin")
        set(OPENSSL_ROOT_DIR
                "/usr/local/opt/openssl" # Homebrew installed OpenSSL
        )
    endif ()
    find_package(OpenSSL REQUIRED)
    list(APPEND MELON_DEPS_LIBS  ${OPENSSL_CRYPTO_LIBRARY})
    list(APPEND MELON_DEPS_LIBS  ${OPENSSL_SSL_LIBRARY})
    list(APPEND MELON_DEPS_INCLUDE_DIRS ${OPENSSL_INCLUDE_DIR})
endmacro()

macro(melon_find_zlib)
    find_path(ZLIB_INCLUDE_DIRS NAMES zlib.h)
    find_library(ZLIB_LIBRARIES NAMES z)
    if(NOT ZLIB_INCLUDE_DIRS OR NOT ZLIB_LIBRARIES)
        message(FATAL_ERROR "zlib not found")
    endif()
    list(APPEND MELON_DEPS_LIBS ${ZLIB_LIBRARIES})
    list(APPEND MELON_DEPS_INCLUDE_DIRS ${ZLIB_INCLUDE_DIRS})
endmacro()

melon_find_gflags()
melon_find_protobuf()
melon_find_leveldb()
melon_find_openssl()
melon_find_zlib()
list(REMOVE_DUPLICATES MELON_DEPS_LIBS)
list(REMOVE_DUPLICATES MELON_DEPS_INCLUDE_DIRS)
