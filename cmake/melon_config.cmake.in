
@PACKAGE_INIT@

include ("${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@Targets.cmake")

set(@PROJECT_NAME@_VERSION_MAJOR @PROJECT_VERSION_MAJOR@)
set(@PROJECT_NAME@_VERSION_MINOR @PROJECT_VERSION_MINOR@)
set(@PROJECT_NAME@_VERSION_PATCH @PROJECT_VERSION_PATCH@)
set(@PROJECT_NAME@_VERSION @PROJECT_VERSION@)
set(@PROJECT_NAME@_INCLUDE_DIR ${PACKAGE_PREFIX_DIR}/include)
set(MELON_CXX_DEFINES @MELON_CXX_DEFINES@)
set(MELON_CXX_OPTIONS @MELON_CXX_OPTIONS@)
set(MELON_C_OPTIONS @MELON_C_OPTIONS@)

if(NOT EA_ROOT)
    set(EA_ROOT /opt/EA/inf)
endif()
list(APPEND CMAKE_PREFIX_PATH ${EA_ROOT})

set(MELON_SYSTEM_DYLINK)
if (APPLE)
    find_library(CoreFoundation CoreFoundation)
    list(APPEND MELON_SYSTEM_DYLINK ${CoreFoundation} pthread)
elseif (${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
    list(APPEND MELON_SYSTEM_DYLINK rt dl pthread)
endif ()

##################################
# gflags
##################################
macro(carbin_find_static_gflags)
    set(GFLAGS_STATIC_FOUND FALSE)
    find_path(GFLAGS_INCLUDE_DIR NAMES gflags/gflags.h PATHS ${EA_ROOT})
    find_library(GFLAGS_STATIC_LIB NAMES libgflags.a PATHS ${EA_ROOT})
    if (GFLAGS_INCLUDE_DIR AND GFLAGS_STATIC_LIB)
        set(GFLAGS_STATIC_FOUND TRUE)
    endif ()
    message(STATUS "GFLAGS_STATIC_FOUND: ${GFLAGS_STATIC_FOUND}")
    if (GFLAGS_STATIC_FOUND)
        message(STATUS "GFLAGS_INCLUDE_PATH: ${GFLAGS_INCLUDE_DIR}")
        message(STATUS "GFLAGS_STATIC_LIB: ${GFLAGS_STATIC_LIB}")
    endif ()
endmacro()

##################################
# zlib
##################################
macro(carbin_find_static_zlib)
    set(ZLIB_FOUND FALSE)
    find_path(ZLIB_INCLUDE_DIR NAMES zlib.h)
    find_library(ZLIB_LIB NAMES z libz.a)
    if (ZLIB_LIB AND ZLIB_INCLUDE_DIR)
        set(ZLIB_FOUND TRUE)
    endif ()
    message(STATUS "ZLIB_FOUND: ${ZLIB_FOUND}")
    if (ZLIB_FOUND)
        message(STATUS "ZLIB_INCLUDE_DIR: ${ZLIB_INCLUDE_DIR}")
        message(STATUS "ZLIB_LIB: ${ZLIB_LIB}")
    endif ()
endmacro()

##################################
# leveldb
##################################
macro(carbin_find_static_leveldb)
    set(LEVELDB_STATIC_FOUND FALSE)
    find_path(LEVELDB_INCLUDE_DIR NAMES leveldb/db.h PATHS ${EA_ROOT})
    find_library(LEVELDB_STATIC_LIB NAMES libleveldb.a PATHS ${EA_ROOT})
    if (LEVELDB_STATIC_LIB)
        set(LEVELDB_STATIC_FOUND TRUE)
    endif ()

    if (LEVELDB_INCLUDE_DIR AND LEVELDB_STATIC_LIB)
        set(LEVELDB_STATIC_FOUND TRUE)
    endif ()
    message(STATUS "LEVELDB_STATIC_FOUND: ${LEVELDB_STATIC_FOUND}")
    if (LEVELDB_STATIC_FOUND)
        message(STATUS "LEVELDB_INCLUDE_PATH: ${LEVELDB_INCLUDE_DIR}")
        message(STATUS "LEVELDB_STATIC_LIB: ${LEVELDB_STATIC_LIB}")
    endif ()
endmacro()

##################################
# openssl
##################################
find_package(OpenSSL REQUIRED)
message(STATUS "OpenSSL include dir: ${OPENSSL_INCLUDE_DIR}")
message(STATUS "OpenSSL ssl library: ${OPENSSL_SSL_LIBRARY}")
message(STATUS "OpenSSL crypto library: ${OPENSSL_CRYPTO_LIBRARY}")

############################################################
# protobuf
############################################################
find_package(Protobuf REQUIRED)
message(STATUS "Protobuf include dir: ${PROTOBUF_INCLUDE_DIRS}")
message(STATUS "Protobuf libraries: ${PROTOBUF_LIBRARY}")
message(STATUS "Protobuf protoc: ${PROTOBUF_PROTOC_EXECUTABLE}")
message(STATUS "Protobuf protoc: ${PROTOBUF_PROTOC_LIBRARY}")

############################################################
# turbo
############################################################
find_package(turbo 0.5.6 REQUIRED)
get_target_property(TURBO_STATIC_LIB turbo::turbo_static LOCATION)

carbin_find_static_gflags()
if (NOT GFLAGS_STATIC_FOUND)
    message(FATAL_ERROR "gflags not found")
endif ()
carbin_find_static_zlib()
if (NOT ZLIB_FOUND)
    message(FATAL_ERROR "zlib not found")
endif ()
carbin_find_static_leveldb()
if (NOT LEVELDB_STATIC_FOUND)
    message(FATAL_ERROR "leveldb not found")
endif ()

set(MELON_DEPS_LINK
        ${GFLAGS_STATIC_LIB}
        ${PROTOBUF_LIBRARY}
        ${PROTOBUF_PROTOC_LIBRARY}
        ${LEVELDB_STATIC_LIB}
        ${OPENSSL_SSL_LIBRARY}
        ${OPENSSL_CRYPTO_LIBRARY}
        ${ZLIB_LIB}
        ${TURBO_STATIC_LIB}
        ${CARBIN_SYSTEM_DYLINK}
        )
get_target_property(MELON_STATIC_LIB melon::melon_static LOCATION)
get_target_property(MELON_SHARED_LIB melon::melon_shared LOCATION)
set(MELON_STATIC_LIBRARIES ${MELON_STATIC_LIB} ${MELON_DEPS_LINK} ${MELON_SYSTEM_DYLINK})
set(MELON_SHARED_LIBRARIES ${MELON_SHARED_LIB} ${MELON_DEPS_LINK} ${MELON_SYSTEM_DYLINK})

set(MELON_INCLUDE_DIRS ${@PROJECT_NAME@_INCLUDE_DIR} ${GFLAGS_INCLUDE_DIR} ${PROTOBUF_INCLUDE_DIRS} ${LEVELDB_INCLUDE_DIR} ${OPENSSL_INCLUDE_DIR} ${ZLIB_INCLUDE_DIR} ${turbo_INCLUDE_DIR})
list(REMOVE_DUPLICATES MELON_INCLUDE_DIRS)